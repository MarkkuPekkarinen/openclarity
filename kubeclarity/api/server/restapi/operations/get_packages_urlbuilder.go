// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetPackagesURL generates an URL for the get packages operation
type GetPackagesURL struct {
	ApplicationID             *string
	ApplicationResourceID     *string
	ApplicationResourcesGte   *int64
	ApplicationResourcesIsNot []int64
	ApplicationResourcesIs    []int64
	ApplicationResourcesLte   *int64
	ApplicationsGte           *int64
	ApplicationsIsNot         []int64
	ApplicationsIs            []int64
	ApplicationsLte           *int64
	CurrentRuntimeScan        *bool
	LanguageContains          []string
	LanguageEnd               *string
	LanguageIsNot             []string
	LanguageIs                []string
	LanguageStart             *string
	LicenseContains           []string
	LicenseEnd                *string
	LicenseIsNot              []string
	LicenseIs                 []string
	LicenseStart              *string
	PackageNameContains       []string
	PackageNameEnd            *string
	PackageNameIsNot          []string
	PackageNameIs             []string
	PackageNameStart          *string
	PackageVersionContains    []string
	PackageVersionEnd         *string
	PackageVersionIsNot       []string
	PackageVersionIs          []string
	PackageVersionStart       *string
	Page                      int64
	PageSize                  int64
	SortDir                   *string
	SortKey                   string
	VulnerabilitySeverityGte  *string
	VulnerabilitySeverityLte  *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetPackagesURL) WithBasePath(bp string) *GetPackagesURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetPackagesURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetPackagesURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/packages"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var applicationIDQ string
	if o.ApplicationID != nil {
		applicationIDQ = *o.ApplicationID
	}
	if applicationIDQ != "" {
		qs.Set("applicationID", applicationIDQ)
	}

	var applicationResourceIDQ string
	if o.ApplicationResourceID != nil {
		applicationResourceIDQ = *o.ApplicationResourceID
	}
	if applicationResourceIDQ != "" {
		qs.Set("applicationResourceID", applicationResourceIDQ)
	}

	var applicationResourcesGteQ string
	if o.ApplicationResourcesGte != nil {
		applicationResourcesGteQ = swag.FormatInt64(*o.ApplicationResourcesGte)
	}
	if applicationResourcesGteQ != "" {
		qs.Set("applicationResources[gte]", applicationResourcesGteQ)
	}

	var applicationResourcesIsNotIR []string
	for _, applicationResourcesIsNotI := range o.ApplicationResourcesIsNot {
		applicationResourcesIsNotIS := swag.FormatInt64(applicationResourcesIsNotI)
		if applicationResourcesIsNotIS != "" {
			applicationResourcesIsNotIR = append(applicationResourcesIsNotIR, applicationResourcesIsNotIS)
		}
	}

	applicationResourcesIsNot := swag.JoinByFormat(applicationResourcesIsNotIR, "")

	if len(applicationResourcesIsNot) > 0 {
		qsv := applicationResourcesIsNot[0]
		if qsv != "" {
			qs.Set("applicationResources[isNot]", qsv)
		}
	}

	var applicationResourcesIsIR []string
	for _, applicationResourcesIsI := range o.ApplicationResourcesIs {
		applicationResourcesIsIS := swag.FormatInt64(applicationResourcesIsI)
		if applicationResourcesIsIS != "" {
			applicationResourcesIsIR = append(applicationResourcesIsIR, applicationResourcesIsIS)
		}
	}

	applicationResourcesIs := swag.JoinByFormat(applicationResourcesIsIR, "")

	if len(applicationResourcesIs) > 0 {
		qsv := applicationResourcesIs[0]
		if qsv != "" {
			qs.Set("applicationResources[is]", qsv)
		}
	}

	var applicationResourcesLteQ string
	if o.ApplicationResourcesLte != nil {
		applicationResourcesLteQ = swag.FormatInt64(*o.ApplicationResourcesLte)
	}
	if applicationResourcesLteQ != "" {
		qs.Set("applicationResources[lte]", applicationResourcesLteQ)
	}

	var applicationsGteQ string
	if o.ApplicationsGte != nil {
		applicationsGteQ = swag.FormatInt64(*o.ApplicationsGte)
	}
	if applicationsGteQ != "" {
		qs.Set("applications[gte]", applicationsGteQ)
	}

	var applicationsIsNotIR []string
	for _, applicationsIsNotI := range o.ApplicationsIsNot {
		applicationsIsNotIS := swag.FormatInt64(applicationsIsNotI)
		if applicationsIsNotIS != "" {
			applicationsIsNotIR = append(applicationsIsNotIR, applicationsIsNotIS)
		}
	}

	applicationsIsNot := swag.JoinByFormat(applicationsIsNotIR, "")

	if len(applicationsIsNot) > 0 {
		qsv := applicationsIsNot[0]
		if qsv != "" {
			qs.Set("applications[isNot]", qsv)
		}
	}

	var applicationsIsIR []string
	for _, applicationsIsI := range o.ApplicationsIs {
		applicationsIsIS := swag.FormatInt64(applicationsIsI)
		if applicationsIsIS != "" {
			applicationsIsIR = append(applicationsIsIR, applicationsIsIS)
		}
	}

	applicationsIs := swag.JoinByFormat(applicationsIsIR, "")

	if len(applicationsIs) > 0 {
		qsv := applicationsIs[0]
		if qsv != "" {
			qs.Set("applications[is]", qsv)
		}
	}

	var applicationsLteQ string
	if o.ApplicationsLte != nil {
		applicationsLteQ = swag.FormatInt64(*o.ApplicationsLte)
	}
	if applicationsLteQ != "" {
		qs.Set("applications[lte]", applicationsLteQ)
	}

	var currentRuntimeScanQ string
	if o.CurrentRuntimeScan != nil {
		currentRuntimeScanQ = swag.FormatBool(*o.CurrentRuntimeScan)
	}
	if currentRuntimeScanQ != "" {
		qs.Set("currentRuntimeScan", currentRuntimeScanQ)
	}

	var languageContainsIR []string
	for _, languageContainsI := range o.LanguageContains {
		languageContainsIS := languageContainsI
		if languageContainsIS != "" {
			languageContainsIR = append(languageContainsIR, languageContainsIS)
		}
	}

	languageContains := swag.JoinByFormat(languageContainsIR, "")

	if len(languageContains) > 0 {
		qsv := languageContains[0]
		if qsv != "" {
			qs.Set("language[contains]", qsv)
		}
	}

	var languageEndQ string
	if o.LanguageEnd != nil {
		languageEndQ = *o.LanguageEnd
	}
	if languageEndQ != "" {
		qs.Set("language[end]", languageEndQ)
	}

	var languageIsNotIR []string
	for _, languageIsNotI := range o.LanguageIsNot {
		languageIsNotIS := languageIsNotI
		if languageIsNotIS != "" {
			languageIsNotIR = append(languageIsNotIR, languageIsNotIS)
		}
	}

	languageIsNot := swag.JoinByFormat(languageIsNotIR, "")

	if len(languageIsNot) > 0 {
		qsv := languageIsNot[0]
		if qsv != "" {
			qs.Set("language[isNot]", qsv)
		}
	}

	var languageIsIR []string
	for _, languageIsI := range o.LanguageIs {
		languageIsIS := languageIsI
		if languageIsIS != "" {
			languageIsIR = append(languageIsIR, languageIsIS)
		}
	}

	languageIs := swag.JoinByFormat(languageIsIR, "")

	if len(languageIs) > 0 {
		qsv := languageIs[0]
		if qsv != "" {
			qs.Set("language[is]", qsv)
		}
	}

	var languageStartQ string
	if o.LanguageStart != nil {
		languageStartQ = *o.LanguageStart
	}
	if languageStartQ != "" {
		qs.Set("language[start]", languageStartQ)
	}

	var licenseContainsIR []string
	for _, licenseContainsI := range o.LicenseContains {
		licenseContainsIS := licenseContainsI
		if licenseContainsIS != "" {
			licenseContainsIR = append(licenseContainsIR, licenseContainsIS)
		}
	}

	licenseContains := swag.JoinByFormat(licenseContainsIR, "")

	if len(licenseContains) > 0 {
		qsv := licenseContains[0]
		if qsv != "" {
			qs.Set("license[contains]", qsv)
		}
	}

	var licenseEndQ string
	if o.LicenseEnd != nil {
		licenseEndQ = *o.LicenseEnd
	}
	if licenseEndQ != "" {
		qs.Set("license[end]", licenseEndQ)
	}

	var licenseIsNotIR []string
	for _, licenseIsNotI := range o.LicenseIsNot {
		licenseIsNotIS := licenseIsNotI
		if licenseIsNotIS != "" {
			licenseIsNotIR = append(licenseIsNotIR, licenseIsNotIS)
		}
	}

	licenseIsNot := swag.JoinByFormat(licenseIsNotIR, "")

	if len(licenseIsNot) > 0 {
		qsv := licenseIsNot[0]
		if qsv != "" {
			qs.Set("license[isNot]", qsv)
		}
	}

	var licenseIsIR []string
	for _, licenseIsI := range o.LicenseIs {
		licenseIsIS := licenseIsI
		if licenseIsIS != "" {
			licenseIsIR = append(licenseIsIR, licenseIsIS)
		}
	}

	licenseIs := swag.JoinByFormat(licenseIsIR, "")

	if len(licenseIs) > 0 {
		qsv := licenseIs[0]
		if qsv != "" {
			qs.Set("license[is]", qsv)
		}
	}

	var licenseStartQ string
	if o.LicenseStart != nil {
		licenseStartQ = *o.LicenseStart
	}
	if licenseStartQ != "" {
		qs.Set("license[start]", licenseStartQ)
	}

	var packageNameContainsIR []string
	for _, packageNameContainsI := range o.PackageNameContains {
		packageNameContainsIS := packageNameContainsI
		if packageNameContainsIS != "" {
			packageNameContainsIR = append(packageNameContainsIR, packageNameContainsIS)
		}
	}

	packageNameContains := swag.JoinByFormat(packageNameContainsIR, "")

	if len(packageNameContains) > 0 {
		qsv := packageNameContains[0]
		if qsv != "" {
			qs.Set("packageName[contains]", qsv)
		}
	}

	var packageNameEndQ string
	if o.PackageNameEnd != nil {
		packageNameEndQ = *o.PackageNameEnd
	}
	if packageNameEndQ != "" {
		qs.Set("packageName[end]", packageNameEndQ)
	}

	var packageNameIsNotIR []string
	for _, packageNameIsNotI := range o.PackageNameIsNot {
		packageNameIsNotIS := packageNameIsNotI
		if packageNameIsNotIS != "" {
			packageNameIsNotIR = append(packageNameIsNotIR, packageNameIsNotIS)
		}
	}

	packageNameIsNot := swag.JoinByFormat(packageNameIsNotIR, "")

	if len(packageNameIsNot) > 0 {
		qsv := packageNameIsNot[0]
		if qsv != "" {
			qs.Set("packageName[isNot]", qsv)
		}
	}

	var packageNameIsIR []string
	for _, packageNameIsI := range o.PackageNameIs {
		packageNameIsIS := packageNameIsI
		if packageNameIsIS != "" {
			packageNameIsIR = append(packageNameIsIR, packageNameIsIS)
		}
	}

	packageNameIs := swag.JoinByFormat(packageNameIsIR, "")

	if len(packageNameIs) > 0 {
		qsv := packageNameIs[0]
		if qsv != "" {
			qs.Set("packageName[is]", qsv)
		}
	}

	var packageNameStartQ string
	if o.PackageNameStart != nil {
		packageNameStartQ = *o.PackageNameStart
	}
	if packageNameStartQ != "" {
		qs.Set("packageName[start]", packageNameStartQ)
	}

	var packageVersionContainsIR []string
	for _, packageVersionContainsI := range o.PackageVersionContains {
		packageVersionContainsIS := packageVersionContainsI
		if packageVersionContainsIS != "" {
			packageVersionContainsIR = append(packageVersionContainsIR, packageVersionContainsIS)
		}
	}

	packageVersionContains := swag.JoinByFormat(packageVersionContainsIR, "")

	if len(packageVersionContains) > 0 {
		qsv := packageVersionContains[0]
		if qsv != "" {
			qs.Set("packageVersion[contains]", qsv)
		}
	}

	var packageVersionEndQ string
	if o.PackageVersionEnd != nil {
		packageVersionEndQ = *o.PackageVersionEnd
	}
	if packageVersionEndQ != "" {
		qs.Set("packageVersion[end]", packageVersionEndQ)
	}

	var packageVersionIsNotIR []string
	for _, packageVersionIsNotI := range o.PackageVersionIsNot {
		packageVersionIsNotIS := packageVersionIsNotI
		if packageVersionIsNotIS != "" {
			packageVersionIsNotIR = append(packageVersionIsNotIR, packageVersionIsNotIS)
		}
	}

	packageVersionIsNot := swag.JoinByFormat(packageVersionIsNotIR, "")

	if len(packageVersionIsNot) > 0 {
		qsv := packageVersionIsNot[0]
		if qsv != "" {
			qs.Set("packageVersion[isNot]", qsv)
		}
	}

	var packageVersionIsIR []string
	for _, packageVersionIsI := range o.PackageVersionIs {
		packageVersionIsIS := packageVersionIsI
		if packageVersionIsIS != "" {
			packageVersionIsIR = append(packageVersionIsIR, packageVersionIsIS)
		}
	}

	packageVersionIs := swag.JoinByFormat(packageVersionIsIR, "")

	if len(packageVersionIs) > 0 {
		qsv := packageVersionIs[0]
		if qsv != "" {
			qs.Set("packageVersion[is]", qsv)
		}
	}

	var packageVersionStartQ string
	if o.PackageVersionStart != nil {
		packageVersionStartQ = *o.PackageVersionStart
	}
	if packageVersionStartQ != "" {
		qs.Set("packageVersion[start]", packageVersionStartQ)
	}

	pageQ := swag.FormatInt64(o.Page)
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	pageSizeQ := swag.FormatInt64(o.PageSize)
	if pageSizeQ != "" {
		qs.Set("pageSize", pageSizeQ)
	}

	var sortDirQ string
	if o.SortDir != nil {
		sortDirQ = *o.SortDir
	}
	if sortDirQ != "" {
		qs.Set("sortDir", sortDirQ)
	}

	sortKeyQ := o.SortKey
	if sortKeyQ != "" {
		qs.Set("sortKey", sortKeyQ)
	}

	var vulnerabilitySeverityGteQ string
	if o.VulnerabilitySeverityGte != nil {
		vulnerabilitySeverityGteQ = *o.VulnerabilitySeverityGte
	}
	if vulnerabilitySeverityGteQ != "" {
		qs.Set("vulnerabilitySeverity[gte]", vulnerabilitySeverityGteQ)
	}

	var vulnerabilitySeverityLteQ string
	if o.VulnerabilitySeverityLte != nil {
		vulnerabilitySeverityLteQ = *o.VulnerabilitySeverityLte
	}
	if vulnerabilitySeverityLteQ != "" {
		qs.Set("vulnerabilitySeverity[lte]", vulnerabilitySeverityLteQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetPackagesURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetPackagesURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetPackagesURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetPackagesURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetPackagesURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetPackagesURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
