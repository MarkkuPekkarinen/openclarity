// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetPackagesIDApplicationResourcesParams creates a new GetPackagesIDApplicationResourcesParams object
// with the default values initialized.
func NewGetPackagesIDApplicationResourcesParams() GetPackagesIDApplicationResourcesParams {

	var (
		// initialize parameters with default values

		sortDirDefault = string("ASC")
	)

	return GetPackagesIDApplicationResourcesParams{
		SortDir: &sortDirDefault,
	}
}

// GetPackagesIDApplicationResourcesParams contains all the bound params for the get packages ID application resources operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetPackagesIDApplicationResources
type GetPackagesIDApplicationResourcesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	ID string
	/*Page number of the query
	  Required: true
	  In: query
	*/
	Page int64
	/*Maximum items to return
	  Required: true
	  Maximum: 50
	  Minimum: 1
	  In: query
	*/
	PageSize int64
	/*
	  In: query
	*/
	ReportingSBOMAnalyzersContainElements []string
	/*
	  In: query
	*/
	ReportingSBOMAnalyzersDoesntContainElements []string
	/*
	  In: query
	*/
	ResourceHashContains []string
	/*
	  In: query
	*/
	ResourceHashEnd *string
	/*
	  In: query
	*/
	ResourceHashIsNot []string
	/*
	  In: query
	*/
	ResourceHashIs []string
	/*
	  In: query
	*/
	ResourceHashStart *string
	/*
	  In: query
	*/
	ResourceNameContains []string
	/*
	  In: query
	*/
	ResourceNameEnd *string
	/*
	  In: query
	*/
	ResourceNameIsNot []string
	/*
	  In: query
	*/
	ResourceNameIs []string
	/*
	  In: query
	*/
	ResourceNameStart *string
	/*Sorting direction
	  In: query
	  Default: "ASC"
	*/
	SortDir *string
	/*Sort key
	  Required: true
	  In: query
	*/
	SortKey string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPackagesIDApplicationResourcesParams() beforehand.
func (o *GetPackagesIDApplicationResourcesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qReportingSBOMAnalyzersContainElements, qhkReportingSBOMAnalyzersContainElements, _ := qs.GetOK("reportingSBOMAnalyzers[containElements]")
	if err := o.bindReportingSBOMAnalyzersContainElements(qReportingSBOMAnalyzersContainElements, qhkReportingSBOMAnalyzersContainElements, route.Formats); err != nil {
		res = append(res, err)
	}

	qReportingSBOMAnalyzersDoesntContainElements, qhkReportingSBOMAnalyzersDoesntContainElements, _ := qs.GetOK("reportingSBOMAnalyzers[doesntContainElements]")
	if err := o.bindReportingSBOMAnalyzersDoesntContainElements(qReportingSBOMAnalyzersDoesntContainElements, qhkReportingSBOMAnalyzersDoesntContainElements, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceHashContains, qhkResourceHashContains, _ := qs.GetOK("resourceHash[contains]")
	if err := o.bindResourceHashContains(qResourceHashContains, qhkResourceHashContains, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceHashEnd, qhkResourceHashEnd, _ := qs.GetOK("resourceHash[end]")
	if err := o.bindResourceHashEnd(qResourceHashEnd, qhkResourceHashEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceHashIsNot, qhkResourceHashIsNot, _ := qs.GetOK("resourceHash[isNot]")
	if err := o.bindResourceHashIsNot(qResourceHashIsNot, qhkResourceHashIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceHashIs, qhkResourceHashIs, _ := qs.GetOK("resourceHash[is]")
	if err := o.bindResourceHashIs(qResourceHashIs, qhkResourceHashIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceHashStart, qhkResourceHashStart, _ := qs.GetOK("resourceHash[start]")
	if err := o.bindResourceHashStart(qResourceHashStart, qhkResourceHashStart, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceNameContains, qhkResourceNameContains, _ := qs.GetOK("resourceName[contains]")
	if err := o.bindResourceNameContains(qResourceNameContains, qhkResourceNameContains, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceNameEnd, qhkResourceNameEnd, _ := qs.GetOK("resourceName[end]")
	if err := o.bindResourceNameEnd(qResourceNameEnd, qhkResourceNameEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceNameIsNot, qhkResourceNameIsNot, _ := qs.GetOK("resourceName[isNot]")
	if err := o.bindResourceNameIsNot(qResourceNameIsNot, qhkResourceNameIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceNameIs, qhkResourceNameIs, _ := qs.GetOK("resourceName[is]")
	if err := o.bindResourceNameIs(qResourceNameIs, qhkResourceNameIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qResourceNameStart, qhkResourceNameStart, _ := qs.GetOK("resourceName[start]")
	if err := o.bindResourceNameStart(qResourceNameStart, qhkResourceNameStart, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortDir, qhkSortDir, _ := qs.GetOK("sortDir")
	if err := o.bindSortDir(qSortDir, qhkSortDir, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortKey, qhkSortKey, _ := qs.GetOK("sortKey")
	if err := o.bindSortKey(qSortKey, qhkSortKey, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *GetPackagesIDApplicationResourcesParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.ID = raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetPackagesIDApplicationResourcesParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("page", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("page", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = value

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetPackagesIDApplicationResourcesParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("pageSize", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("pageSize", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = value

	if err := o.validatePageSize(formats); err != nil {
		return err
	}

	return nil
}

// validatePageSize carries on validations for parameter PageSize
func (o *GetPackagesIDApplicationResourcesParams) validatePageSize(formats strfmt.Registry) error {

	if err := validate.MinimumInt("pageSize", "query", o.PageSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "query", o.PageSize, 50, false); err != nil {
		return err
	}

	return nil
}

// bindReportingSBOMAnalyzersContainElements binds and validates array parameter ReportingSBOMAnalyzersContainElements from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindReportingSBOMAnalyzersContainElements(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvReportingSBOMAnalyzersContainElements string
	if len(rawData) > 0 {
		qvReportingSBOMAnalyzersContainElements = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	reportingSBOMAnalyzersContainElementsIC := swag.SplitByFormat(qvReportingSBOMAnalyzersContainElements, "")
	if len(reportingSBOMAnalyzersContainElementsIC) == 0 {
		return nil
	}

	var reportingSBOMAnalyzersContainElementsIR []string
	for _, reportingSBOMAnalyzersContainElementsIV := range reportingSBOMAnalyzersContainElementsIC {
		reportingSBOMAnalyzersContainElementsI := reportingSBOMAnalyzersContainElementsIV

		reportingSBOMAnalyzersContainElementsIR = append(reportingSBOMAnalyzersContainElementsIR, reportingSBOMAnalyzersContainElementsI)
	}

	o.ReportingSBOMAnalyzersContainElements = reportingSBOMAnalyzersContainElementsIR

	return nil
}

// bindReportingSBOMAnalyzersDoesntContainElements binds and validates array parameter ReportingSBOMAnalyzersDoesntContainElements from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindReportingSBOMAnalyzersDoesntContainElements(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvReportingSBOMAnalyzersDoesntContainElements string
	if len(rawData) > 0 {
		qvReportingSBOMAnalyzersDoesntContainElements = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	reportingSBOMAnalyzersDoesntContainElementsIC := swag.SplitByFormat(qvReportingSBOMAnalyzersDoesntContainElements, "")
	if len(reportingSBOMAnalyzersDoesntContainElementsIC) == 0 {
		return nil
	}

	var reportingSBOMAnalyzersDoesntContainElementsIR []string
	for _, reportingSBOMAnalyzersDoesntContainElementsIV := range reportingSBOMAnalyzersDoesntContainElementsIC {
		reportingSBOMAnalyzersDoesntContainElementsI := reportingSBOMAnalyzersDoesntContainElementsIV

		reportingSBOMAnalyzersDoesntContainElementsIR = append(reportingSBOMAnalyzersDoesntContainElementsIR, reportingSBOMAnalyzersDoesntContainElementsI)
	}

	o.ReportingSBOMAnalyzersDoesntContainElements = reportingSBOMAnalyzersDoesntContainElementsIR

	return nil
}

// bindResourceHashContains binds and validates array parameter ResourceHashContains from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindResourceHashContains(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvResourceHashContains string
	if len(rawData) > 0 {
		qvResourceHashContains = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	resourceHashContainsIC := swag.SplitByFormat(qvResourceHashContains, "")
	if len(resourceHashContainsIC) == 0 {
		return nil
	}

	var resourceHashContainsIR []string
	for _, resourceHashContainsIV := range resourceHashContainsIC {
		resourceHashContainsI := resourceHashContainsIV

		resourceHashContainsIR = append(resourceHashContainsIR, resourceHashContainsI)
	}

	o.ResourceHashContains = resourceHashContainsIR

	return nil
}

// bindResourceHashEnd binds and validates parameter ResourceHashEnd from query.
func (o *GetPackagesIDApplicationResourcesParams) bindResourceHashEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ResourceHashEnd = &raw

	return nil
}

// bindResourceHashIsNot binds and validates array parameter ResourceHashIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindResourceHashIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvResourceHashIsNot string
	if len(rawData) > 0 {
		qvResourceHashIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	resourceHashIsNotIC := swag.SplitByFormat(qvResourceHashIsNot, "")
	if len(resourceHashIsNotIC) == 0 {
		return nil
	}

	var resourceHashIsNotIR []string
	for _, resourceHashIsNotIV := range resourceHashIsNotIC {
		resourceHashIsNotI := resourceHashIsNotIV

		resourceHashIsNotIR = append(resourceHashIsNotIR, resourceHashIsNotI)
	}

	o.ResourceHashIsNot = resourceHashIsNotIR

	return nil
}

// bindResourceHashIs binds and validates array parameter ResourceHashIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindResourceHashIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvResourceHashIs string
	if len(rawData) > 0 {
		qvResourceHashIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	resourceHashIsIC := swag.SplitByFormat(qvResourceHashIs, "")
	if len(resourceHashIsIC) == 0 {
		return nil
	}

	var resourceHashIsIR []string
	for _, resourceHashIsIV := range resourceHashIsIC {
		resourceHashIsI := resourceHashIsIV

		resourceHashIsIR = append(resourceHashIsIR, resourceHashIsI)
	}

	o.ResourceHashIs = resourceHashIsIR

	return nil
}

// bindResourceHashStart binds and validates parameter ResourceHashStart from query.
func (o *GetPackagesIDApplicationResourcesParams) bindResourceHashStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ResourceHashStart = &raw

	return nil
}

// bindResourceNameContains binds and validates array parameter ResourceNameContains from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindResourceNameContains(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvResourceNameContains string
	if len(rawData) > 0 {
		qvResourceNameContains = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	resourceNameContainsIC := swag.SplitByFormat(qvResourceNameContains, "")
	if len(resourceNameContainsIC) == 0 {
		return nil
	}

	var resourceNameContainsIR []string
	for _, resourceNameContainsIV := range resourceNameContainsIC {
		resourceNameContainsI := resourceNameContainsIV

		resourceNameContainsIR = append(resourceNameContainsIR, resourceNameContainsI)
	}

	o.ResourceNameContains = resourceNameContainsIR

	return nil
}

// bindResourceNameEnd binds and validates parameter ResourceNameEnd from query.
func (o *GetPackagesIDApplicationResourcesParams) bindResourceNameEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ResourceNameEnd = &raw

	return nil
}

// bindResourceNameIsNot binds and validates array parameter ResourceNameIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindResourceNameIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvResourceNameIsNot string
	if len(rawData) > 0 {
		qvResourceNameIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	resourceNameIsNotIC := swag.SplitByFormat(qvResourceNameIsNot, "")
	if len(resourceNameIsNotIC) == 0 {
		return nil
	}

	var resourceNameIsNotIR []string
	for _, resourceNameIsNotIV := range resourceNameIsNotIC {
		resourceNameIsNotI := resourceNameIsNotIV

		resourceNameIsNotIR = append(resourceNameIsNotIR, resourceNameIsNotI)
	}

	o.ResourceNameIsNot = resourceNameIsNotIR

	return nil
}

// bindResourceNameIs binds and validates array parameter ResourceNameIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetPackagesIDApplicationResourcesParams) bindResourceNameIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvResourceNameIs string
	if len(rawData) > 0 {
		qvResourceNameIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	resourceNameIsIC := swag.SplitByFormat(qvResourceNameIs, "")
	if len(resourceNameIsIC) == 0 {
		return nil
	}

	var resourceNameIsIR []string
	for _, resourceNameIsIV := range resourceNameIsIC {
		resourceNameIsI := resourceNameIsIV

		resourceNameIsIR = append(resourceNameIsIR, resourceNameIsI)
	}

	o.ResourceNameIs = resourceNameIsIR

	return nil
}

// bindResourceNameStart binds and validates parameter ResourceNameStart from query.
func (o *GetPackagesIDApplicationResourcesParams) bindResourceNameStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ResourceNameStart = &raw

	return nil
}

// bindSortDir binds and validates parameter SortDir from query.
func (o *GetPackagesIDApplicationResourcesParams) bindSortDir(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetPackagesIDApplicationResourcesParams()
		return nil
	}
	o.SortDir = &raw

	if err := o.validateSortDir(formats); err != nil {
		return err
	}

	return nil
}

// validateSortDir carries on validations for parameter SortDir
func (o *GetPackagesIDApplicationResourcesParams) validateSortDir(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortDir", "query", *o.SortDir, []interface{}{"ASC", "DESC"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortKey binds and validates parameter SortKey from query.
func (o *GetPackagesIDApplicationResourcesParams) bindSortKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sortKey", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("sortKey", "query", raw); err != nil {
		return err
	}
	o.SortKey = raw

	if err := o.validateSortKey(formats); err != nil {
		return err
	}

	return nil
}

// validateSortKey carries on validations for parameter SortKey
func (o *GetPackagesIDApplicationResourcesParams) validateSortKey(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortKey", "query", o.SortKey, []interface{}{"resourceName", "resourceHash"}, true); err != nil {
		return err
	}

	return nil
}
