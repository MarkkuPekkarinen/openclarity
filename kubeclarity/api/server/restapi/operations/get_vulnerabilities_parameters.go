// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetVulnerabilitiesParams creates a new GetVulnerabilitiesParams object
// with the default values initialized.
func NewGetVulnerabilitiesParams() GetVulnerabilitiesParams {

	var (
		// initialize parameters with default values

		sortDirDefault = string("ASC")
	)

	return GetVulnerabilitiesParams{
		SortDir: &sortDirDefault,
	}
}

// GetVulnerabilitiesParams contains all the bound params for the get vulnerabilities operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetVulnerabilities
type GetVulnerabilitiesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*application ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	  In: query
	*/
	ApplicationID *string
	/*application resource ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	  In: query
	*/
	ApplicationResourceID *string
	/*greater than or equal
	  In: query
	*/
	ApplicationResourcesGte *int64
	/*
	  In: query
	*/
	ApplicationResourcesIsNot []int64
	/*
	  In: query
	*/
	ApplicationResourcesIs []int64
	/*less than or equal
	  In: query
	*/
	ApplicationResourcesLte *int64
	/*greater than or equal
	  In: query
	*/
	ApplicationsGte *int64
	/*
	  In: query
	*/
	ApplicationsIsNot []int64
	/*
	  In: query
	*/
	ApplicationsIs []int64
	/*less than or equal
	  In: query
	*/
	ApplicationsLte *int64
	/*current runtime scan system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	  In: query
	*/
	CurrentRuntimeScan *bool
	/*
	  In: query
	*/
	HasFixVersionIs *bool
	/*
	  In: query
	*/
	PackageNameContains []string
	/*
	  In: query
	*/
	PackageNameEnd *string
	/*
	  In: query
	*/
	PackageNameIsNot []string
	/*
	  In: query
	*/
	PackageNameIs []string
	/*
	  In: query
	*/
	PackageNameStart *string
	/*
	  In: query
	*/
	PackageVersionContains []string
	/*
	  In: query
	*/
	PackageVersionEnd *string
	/*
	  In: query
	*/
	PackageVersionIsNot []string
	/*
	  In: query
	*/
	PackageVersionIs []string
	/*
	  In: query
	*/
	PackageVersionStart *string
	/*Page number of the query
	  Required: true
	  In: query
	*/
	Page int64
	/*Maximum items to return
	  Required: true
	  Maximum: 50
	  Minimum: 1
	  In: query
	*/
	PageSize int64
	/*
	  In: query
	*/
	ReportingScannersContainElements []string
	/*
	  In: query
	*/
	ReportingScannersDoesntContainElements []string
	/*Sorting direction
	  In: query
	  Default: "ASC"
	*/
	SortDir *string
	/*Sort key
	  Required: true
	  In: query
	*/
	SortKey string
	/*
	  In: query
	*/
	VulnerabilityNameContains []string
	/*
	  In: query
	*/
	VulnerabilityNameEnd *string
	/*
	  In: query
	*/
	VulnerabilityNameIsNot []string
	/*
	  In: query
	*/
	VulnerabilityNameIs []string
	/*
	  In: query
	*/
	VulnerabilityNameStart *string
	/*
	  In: query
	*/
	VulnerabilitySeverityGte *string
	/*
	  In: query
	*/
	VulnerabilitySeverityIsNot []string
	/*
	  In: query
	*/
	VulnerabilitySeverityIs []string
	/*
	  In: query
	*/
	VulnerabilitySeverityLte *string
	/*
	  In: query
	*/
	VulnerabilitySourceIs []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetVulnerabilitiesParams() beforehand.
func (o *GetVulnerabilitiesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qApplicationID, qhkApplicationID, _ := qs.GetOK("applicationID")
	if err := o.bindApplicationID(qApplicationID, qhkApplicationID, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationResourceID, qhkApplicationResourceID, _ := qs.GetOK("applicationResourceID")
	if err := o.bindApplicationResourceID(qApplicationResourceID, qhkApplicationResourceID, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationResourcesGte, qhkApplicationResourcesGte, _ := qs.GetOK("applicationResources[gte]")
	if err := o.bindApplicationResourcesGte(qApplicationResourcesGte, qhkApplicationResourcesGte, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationResourcesIsNot, qhkApplicationResourcesIsNot, _ := qs.GetOK("applicationResources[isNot]")
	if err := o.bindApplicationResourcesIsNot(qApplicationResourcesIsNot, qhkApplicationResourcesIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationResourcesIs, qhkApplicationResourcesIs, _ := qs.GetOK("applicationResources[is]")
	if err := o.bindApplicationResourcesIs(qApplicationResourcesIs, qhkApplicationResourcesIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationResourcesLte, qhkApplicationResourcesLte, _ := qs.GetOK("applicationResources[lte]")
	if err := o.bindApplicationResourcesLte(qApplicationResourcesLte, qhkApplicationResourcesLte, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationsGte, qhkApplicationsGte, _ := qs.GetOK("applications[gte]")
	if err := o.bindApplicationsGte(qApplicationsGte, qhkApplicationsGte, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationsIsNot, qhkApplicationsIsNot, _ := qs.GetOK("applications[isNot]")
	if err := o.bindApplicationsIsNot(qApplicationsIsNot, qhkApplicationsIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationsIs, qhkApplicationsIs, _ := qs.GetOK("applications[is]")
	if err := o.bindApplicationsIs(qApplicationsIs, qhkApplicationsIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qApplicationsLte, qhkApplicationsLte, _ := qs.GetOK("applications[lte]")
	if err := o.bindApplicationsLte(qApplicationsLte, qhkApplicationsLte, route.Formats); err != nil {
		res = append(res, err)
	}

	qCurrentRuntimeScan, qhkCurrentRuntimeScan, _ := qs.GetOK("currentRuntimeScan")
	if err := o.bindCurrentRuntimeScan(qCurrentRuntimeScan, qhkCurrentRuntimeScan, route.Formats); err != nil {
		res = append(res, err)
	}

	qHasFixVersionIs, qhkHasFixVersionIs, _ := qs.GetOK("hasFixVersion[is]")
	if err := o.bindHasFixVersionIs(qHasFixVersionIs, qhkHasFixVersionIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageNameContains, qhkPackageNameContains, _ := qs.GetOK("packageName[contains]")
	if err := o.bindPackageNameContains(qPackageNameContains, qhkPackageNameContains, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageNameEnd, qhkPackageNameEnd, _ := qs.GetOK("packageName[end]")
	if err := o.bindPackageNameEnd(qPackageNameEnd, qhkPackageNameEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageNameIsNot, qhkPackageNameIsNot, _ := qs.GetOK("packageName[isNot]")
	if err := o.bindPackageNameIsNot(qPackageNameIsNot, qhkPackageNameIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageNameIs, qhkPackageNameIs, _ := qs.GetOK("packageName[is]")
	if err := o.bindPackageNameIs(qPackageNameIs, qhkPackageNameIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageNameStart, qhkPackageNameStart, _ := qs.GetOK("packageName[start]")
	if err := o.bindPackageNameStart(qPackageNameStart, qhkPackageNameStart, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageVersionContains, qhkPackageVersionContains, _ := qs.GetOK("packageVersion[contains]")
	if err := o.bindPackageVersionContains(qPackageVersionContains, qhkPackageVersionContains, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageVersionEnd, qhkPackageVersionEnd, _ := qs.GetOK("packageVersion[end]")
	if err := o.bindPackageVersionEnd(qPackageVersionEnd, qhkPackageVersionEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageVersionIsNot, qhkPackageVersionIsNot, _ := qs.GetOK("packageVersion[isNot]")
	if err := o.bindPackageVersionIsNot(qPackageVersionIsNot, qhkPackageVersionIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageVersionIs, qhkPackageVersionIs, _ := qs.GetOK("packageVersion[is]")
	if err := o.bindPackageVersionIs(qPackageVersionIs, qhkPackageVersionIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qPackageVersionStart, qhkPackageVersionStart, _ := qs.GetOK("packageVersion[start]")
	if err := o.bindPackageVersionStart(qPackageVersionStart, qhkPackageVersionStart, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPageSize, qhkPageSize, _ := qs.GetOK("pageSize")
	if err := o.bindPageSize(qPageSize, qhkPageSize, route.Formats); err != nil {
		res = append(res, err)
	}

	qReportingScannersContainElements, qhkReportingScannersContainElements, _ := qs.GetOK("reportingScanners[containElements]")
	if err := o.bindReportingScannersContainElements(qReportingScannersContainElements, qhkReportingScannersContainElements, route.Formats); err != nil {
		res = append(res, err)
	}

	qReportingScannersDoesntContainElements, qhkReportingScannersDoesntContainElements, _ := qs.GetOK("reportingScanners[doesntContainElements]")
	if err := o.bindReportingScannersDoesntContainElements(qReportingScannersDoesntContainElements, qhkReportingScannersDoesntContainElements, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortDir, qhkSortDir, _ := qs.GetOK("sortDir")
	if err := o.bindSortDir(qSortDir, qhkSortDir, route.Formats); err != nil {
		res = append(res, err)
	}

	qSortKey, qhkSortKey, _ := qs.GetOK("sortKey")
	if err := o.bindSortKey(qSortKey, qhkSortKey, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilityNameContains, qhkVulnerabilityNameContains, _ := qs.GetOK("vulnerabilityName[contains]")
	if err := o.bindVulnerabilityNameContains(qVulnerabilityNameContains, qhkVulnerabilityNameContains, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilityNameEnd, qhkVulnerabilityNameEnd, _ := qs.GetOK("vulnerabilityName[end]")
	if err := o.bindVulnerabilityNameEnd(qVulnerabilityNameEnd, qhkVulnerabilityNameEnd, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilityNameIsNot, qhkVulnerabilityNameIsNot, _ := qs.GetOK("vulnerabilityName[isNot]")
	if err := o.bindVulnerabilityNameIsNot(qVulnerabilityNameIsNot, qhkVulnerabilityNameIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilityNameIs, qhkVulnerabilityNameIs, _ := qs.GetOK("vulnerabilityName[is]")
	if err := o.bindVulnerabilityNameIs(qVulnerabilityNameIs, qhkVulnerabilityNameIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilityNameStart, qhkVulnerabilityNameStart, _ := qs.GetOK("vulnerabilityName[start]")
	if err := o.bindVulnerabilityNameStart(qVulnerabilityNameStart, qhkVulnerabilityNameStart, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilitySeverityGte, qhkVulnerabilitySeverityGte, _ := qs.GetOK("vulnerabilitySeverity[gte]")
	if err := o.bindVulnerabilitySeverityGte(qVulnerabilitySeverityGte, qhkVulnerabilitySeverityGte, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilitySeverityIsNot, qhkVulnerabilitySeverityIsNot, _ := qs.GetOK("vulnerabilitySeverity[isNot]")
	if err := o.bindVulnerabilitySeverityIsNot(qVulnerabilitySeverityIsNot, qhkVulnerabilitySeverityIsNot, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilitySeverityIs, qhkVulnerabilitySeverityIs, _ := qs.GetOK("vulnerabilitySeverity[is]")
	if err := o.bindVulnerabilitySeverityIs(qVulnerabilitySeverityIs, qhkVulnerabilitySeverityIs, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilitySeverityLte, qhkVulnerabilitySeverityLte, _ := qs.GetOK("vulnerabilitySeverity[lte]")
	if err := o.bindVulnerabilitySeverityLte(qVulnerabilitySeverityLte, qhkVulnerabilitySeverityLte, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilitySourceIs, qhkVulnerabilitySourceIs, _ := qs.GetOK("vulnerabilitySource[is]")
	if err := o.bindVulnerabilitySourceIs(qVulnerabilitySourceIs, qhkVulnerabilitySourceIs, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindApplicationID binds and validates parameter ApplicationID from query.
func (o *GetVulnerabilitiesParams) bindApplicationID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ApplicationID = &raw

	return nil
}

// bindApplicationResourceID binds and validates parameter ApplicationResourceID from query.
func (o *GetVulnerabilitiesParams) bindApplicationResourceID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ApplicationResourceID = &raw

	return nil
}

// bindApplicationResourcesGte binds and validates parameter ApplicationResourcesGte from query.
func (o *GetVulnerabilitiesParams) bindApplicationResourcesGte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("applicationResources[gte]", "query", "int64", raw)
	}
	o.ApplicationResourcesGte = &value

	return nil
}

// bindApplicationResourcesIsNot binds and validates array parameter ApplicationResourcesIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindApplicationResourcesIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvApplicationResourcesIsNot string
	if len(rawData) > 0 {
		qvApplicationResourcesIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	applicationResourcesIsNotIC := swag.SplitByFormat(qvApplicationResourcesIsNot, "")
	if len(applicationResourcesIsNotIC) == 0 {
		return nil
	}

	var applicationResourcesIsNotIR []int64
	for i, applicationResourcesIsNotIV := range applicationResourcesIsNotIC {
		applicationResourcesIsNotI, err := swag.ConvertInt64(applicationResourcesIsNotIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "applicationResources[isNot]", i), "query", "int64", applicationResourcesIsNotI)
		}

		applicationResourcesIsNotIR = append(applicationResourcesIsNotIR, applicationResourcesIsNotI)
	}

	o.ApplicationResourcesIsNot = applicationResourcesIsNotIR

	return nil
}

// bindApplicationResourcesIs binds and validates array parameter ApplicationResourcesIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindApplicationResourcesIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvApplicationResourcesIs string
	if len(rawData) > 0 {
		qvApplicationResourcesIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	applicationResourcesIsIC := swag.SplitByFormat(qvApplicationResourcesIs, "")
	if len(applicationResourcesIsIC) == 0 {
		return nil
	}

	var applicationResourcesIsIR []int64
	for i, applicationResourcesIsIV := range applicationResourcesIsIC {
		applicationResourcesIsI, err := swag.ConvertInt64(applicationResourcesIsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "applicationResources[is]", i), "query", "int64", applicationResourcesIsI)
		}

		applicationResourcesIsIR = append(applicationResourcesIsIR, applicationResourcesIsI)
	}

	o.ApplicationResourcesIs = applicationResourcesIsIR

	return nil
}

// bindApplicationResourcesLte binds and validates parameter ApplicationResourcesLte from query.
func (o *GetVulnerabilitiesParams) bindApplicationResourcesLte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("applicationResources[lte]", "query", "int64", raw)
	}
	o.ApplicationResourcesLte = &value

	return nil
}

// bindApplicationsGte binds and validates parameter ApplicationsGte from query.
func (o *GetVulnerabilitiesParams) bindApplicationsGte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("applications[gte]", "query", "int64", raw)
	}
	o.ApplicationsGte = &value

	return nil
}

// bindApplicationsIsNot binds and validates array parameter ApplicationsIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindApplicationsIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvApplicationsIsNot string
	if len(rawData) > 0 {
		qvApplicationsIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	applicationsIsNotIC := swag.SplitByFormat(qvApplicationsIsNot, "")
	if len(applicationsIsNotIC) == 0 {
		return nil
	}

	var applicationsIsNotIR []int64
	for i, applicationsIsNotIV := range applicationsIsNotIC {
		applicationsIsNotI, err := swag.ConvertInt64(applicationsIsNotIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "applications[isNot]", i), "query", "int64", applicationsIsNotI)
		}

		applicationsIsNotIR = append(applicationsIsNotIR, applicationsIsNotI)
	}

	o.ApplicationsIsNot = applicationsIsNotIR

	return nil
}

// bindApplicationsIs binds and validates array parameter ApplicationsIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindApplicationsIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvApplicationsIs string
	if len(rawData) > 0 {
		qvApplicationsIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	applicationsIsIC := swag.SplitByFormat(qvApplicationsIs, "")
	if len(applicationsIsIC) == 0 {
		return nil
	}

	var applicationsIsIR []int64
	for i, applicationsIsIV := range applicationsIsIC {
		applicationsIsI, err := swag.ConvertInt64(applicationsIsIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "applications[is]", i), "query", "int64", applicationsIsI)
		}

		applicationsIsIR = append(applicationsIsIR, applicationsIsI)
	}

	o.ApplicationsIs = applicationsIsIR

	return nil
}

// bindApplicationsLte binds and validates parameter ApplicationsLte from query.
func (o *GetVulnerabilitiesParams) bindApplicationsLte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("applications[lte]", "query", "int64", raw)
	}
	o.ApplicationsLte = &value

	return nil
}

// bindCurrentRuntimeScan binds and validates parameter CurrentRuntimeScan from query.
func (o *GetVulnerabilitiesParams) bindCurrentRuntimeScan(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("currentRuntimeScan", "query", "bool", raw)
	}
	o.CurrentRuntimeScan = &value

	return nil
}

// bindHasFixVersionIs binds and validates parameter HasFixVersionIs from query.
func (o *GetVulnerabilitiesParams) bindHasFixVersionIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("hasFixVersion[is]", "query", "bool", raw)
	}
	o.HasFixVersionIs = &value

	return nil
}

// bindPackageNameContains binds and validates array parameter PackageNameContains from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindPackageNameContains(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvPackageNameContains string
	if len(rawData) > 0 {
		qvPackageNameContains = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	packageNameContainsIC := swag.SplitByFormat(qvPackageNameContains, "")
	if len(packageNameContainsIC) == 0 {
		return nil
	}

	var packageNameContainsIR []string
	for _, packageNameContainsIV := range packageNameContainsIC {
		packageNameContainsI := packageNameContainsIV

		packageNameContainsIR = append(packageNameContainsIR, packageNameContainsI)
	}

	o.PackageNameContains = packageNameContainsIR

	return nil
}

// bindPackageNameEnd binds and validates parameter PackageNameEnd from query.
func (o *GetVulnerabilitiesParams) bindPackageNameEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PackageNameEnd = &raw

	return nil
}

// bindPackageNameIsNot binds and validates array parameter PackageNameIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindPackageNameIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvPackageNameIsNot string
	if len(rawData) > 0 {
		qvPackageNameIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	packageNameIsNotIC := swag.SplitByFormat(qvPackageNameIsNot, "")
	if len(packageNameIsNotIC) == 0 {
		return nil
	}

	var packageNameIsNotIR []string
	for _, packageNameIsNotIV := range packageNameIsNotIC {
		packageNameIsNotI := packageNameIsNotIV

		packageNameIsNotIR = append(packageNameIsNotIR, packageNameIsNotI)
	}

	o.PackageNameIsNot = packageNameIsNotIR

	return nil
}

// bindPackageNameIs binds and validates array parameter PackageNameIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindPackageNameIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvPackageNameIs string
	if len(rawData) > 0 {
		qvPackageNameIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	packageNameIsIC := swag.SplitByFormat(qvPackageNameIs, "")
	if len(packageNameIsIC) == 0 {
		return nil
	}

	var packageNameIsIR []string
	for _, packageNameIsIV := range packageNameIsIC {
		packageNameIsI := packageNameIsIV

		packageNameIsIR = append(packageNameIsIR, packageNameIsI)
	}

	o.PackageNameIs = packageNameIsIR

	return nil
}

// bindPackageNameStart binds and validates parameter PackageNameStart from query.
func (o *GetVulnerabilitiesParams) bindPackageNameStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PackageNameStart = &raw

	return nil
}

// bindPackageVersionContains binds and validates array parameter PackageVersionContains from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindPackageVersionContains(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvPackageVersionContains string
	if len(rawData) > 0 {
		qvPackageVersionContains = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	packageVersionContainsIC := swag.SplitByFormat(qvPackageVersionContains, "")
	if len(packageVersionContainsIC) == 0 {
		return nil
	}

	var packageVersionContainsIR []string
	for _, packageVersionContainsIV := range packageVersionContainsIC {
		packageVersionContainsI := packageVersionContainsIV

		packageVersionContainsIR = append(packageVersionContainsIR, packageVersionContainsI)
	}

	o.PackageVersionContains = packageVersionContainsIR

	return nil
}

// bindPackageVersionEnd binds and validates parameter PackageVersionEnd from query.
func (o *GetVulnerabilitiesParams) bindPackageVersionEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PackageVersionEnd = &raw

	return nil
}

// bindPackageVersionIsNot binds and validates array parameter PackageVersionIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindPackageVersionIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvPackageVersionIsNot string
	if len(rawData) > 0 {
		qvPackageVersionIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	packageVersionIsNotIC := swag.SplitByFormat(qvPackageVersionIsNot, "")
	if len(packageVersionIsNotIC) == 0 {
		return nil
	}

	var packageVersionIsNotIR []string
	for _, packageVersionIsNotIV := range packageVersionIsNotIC {
		packageVersionIsNotI := packageVersionIsNotIV

		packageVersionIsNotIR = append(packageVersionIsNotIR, packageVersionIsNotI)
	}

	o.PackageVersionIsNot = packageVersionIsNotIR

	return nil
}

// bindPackageVersionIs binds and validates array parameter PackageVersionIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindPackageVersionIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvPackageVersionIs string
	if len(rawData) > 0 {
		qvPackageVersionIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	packageVersionIsIC := swag.SplitByFormat(qvPackageVersionIs, "")
	if len(packageVersionIsIC) == 0 {
		return nil
	}

	var packageVersionIsIR []string
	for _, packageVersionIsIV := range packageVersionIsIC {
		packageVersionIsI := packageVersionIsIV

		packageVersionIsIR = append(packageVersionIsIR, packageVersionIsI)
	}

	o.PackageVersionIs = packageVersionIsIR

	return nil
}

// bindPackageVersionStart binds and validates parameter PackageVersionStart from query.
func (o *GetVulnerabilitiesParams) bindPackageVersionStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PackageVersionStart = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *GetVulnerabilitiesParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("page", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("page", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = value

	return nil
}

// bindPageSize binds and validates parameter PageSize from query.
func (o *GetVulnerabilitiesParams) bindPageSize(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("pageSize", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("pageSize", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("pageSize", "query", "int64", raw)
	}
	o.PageSize = value

	if err := o.validatePageSize(formats); err != nil {
		return err
	}

	return nil
}

// validatePageSize carries on validations for parameter PageSize
func (o *GetVulnerabilitiesParams) validatePageSize(formats strfmt.Registry) error {

	if err := validate.MinimumInt("pageSize", "query", o.PageSize, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("pageSize", "query", o.PageSize, 50, false); err != nil {
		return err
	}

	return nil
}

// bindReportingScannersContainElements binds and validates array parameter ReportingScannersContainElements from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindReportingScannersContainElements(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvReportingScannersContainElements string
	if len(rawData) > 0 {
		qvReportingScannersContainElements = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	reportingScannersContainElementsIC := swag.SplitByFormat(qvReportingScannersContainElements, "")
	if len(reportingScannersContainElementsIC) == 0 {
		return nil
	}

	var reportingScannersContainElementsIR []string
	for _, reportingScannersContainElementsIV := range reportingScannersContainElementsIC {
		reportingScannersContainElementsI := reportingScannersContainElementsIV

		reportingScannersContainElementsIR = append(reportingScannersContainElementsIR, reportingScannersContainElementsI)
	}

	o.ReportingScannersContainElements = reportingScannersContainElementsIR

	return nil
}

// bindReportingScannersDoesntContainElements binds and validates array parameter ReportingScannersDoesntContainElements from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindReportingScannersDoesntContainElements(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvReportingScannersDoesntContainElements string
	if len(rawData) > 0 {
		qvReportingScannersDoesntContainElements = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	reportingScannersDoesntContainElementsIC := swag.SplitByFormat(qvReportingScannersDoesntContainElements, "")
	if len(reportingScannersDoesntContainElementsIC) == 0 {
		return nil
	}

	var reportingScannersDoesntContainElementsIR []string
	for _, reportingScannersDoesntContainElementsIV := range reportingScannersDoesntContainElementsIC {
		reportingScannersDoesntContainElementsI := reportingScannersDoesntContainElementsIV

		reportingScannersDoesntContainElementsIR = append(reportingScannersDoesntContainElementsIR, reportingScannersDoesntContainElementsI)
	}

	o.ReportingScannersDoesntContainElements = reportingScannersDoesntContainElementsIR

	return nil
}

// bindSortDir binds and validates parameter SortDir from query.
func (o *GetVulnerabilitiesParams) bindSortDir(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetVulnerabilitiesParams()
		return nil
	}
	o.SortDir = &raw

	if err := o.validateSortDir(formats); err != nil {
		return err
	}

	return nil
}

// validateSortDir carries on validations for parameter SortDir
func (o *GetVulnerabilitiesParams) validateSortDir(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortDir", "query", *o.SortDir, []interface{}{"ASC", "DESC"}, true); err != nil {
		return err
	}

	return nil
}

// bindSortKey binds and validates parameter SortKey from query.
func (o *GetVulnerabilitiesParams) bindSortKey(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("sortKey", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("sortKey", "query", raw); err != nil {
		return err
	}
	o.SortKey = raw

	if err := o.validateSortKey(formats); err != nil {
		return err
	}

	return nil
}

// validateSortKey carries on validations for parameter SortKey
func (o *GetVulnerabilitiesParams) validateSortKey(formats strfmt.Registry) error {

	if err := validate.EnumCase("sortKey", "query", o.SortKey, []interface{}{"vulnerabilityName", "packageName", "packageVersion", "severity", "applications", "applicationResources", "fixVersion", "source"}, true); err != nil {
		return err
	}

	return nil
}

// bindVulnerabilityNameContains binds and validates array parameter VulnerabilityNameContains from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindVulnerabilityNameContains(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvVulnerabilityNameContains string
	if len(rawData) > 0 {
		qvVulnerabilityNameContains = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	vulnerabilityNameContainsIC := swag.SplitByFormat(qvVulnerabilityNameContains, "")
	if len(vulnerabilityNameContainsIC) == 0 {
		return nil
	}

	var vulnerabilityNameContainsIR []string
	for _, vulnerabilityNameContainsIV := range vulnerabilityNameContainsIC {
		vulnerabilityNameContainsI := vulnerabilityNameContainsIV

		vulnerabilityNameContainsIR = append(vulnerabilityNameContainsIR, vulnerabilityNameContainsI)
	}

	o.VulnerabilityNameContains = vulnerabilityNameContainsIR

	return nil
}

// bindVulnerabilityNameEnd binds and validates parameter VulnerabilityNameEnd from query.
func (o *GetVulnerabilitiesParams) bindVulnerabilityNameEnd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.VulnerabilityNameEnd = &raw

	return nil
}

// bindVulnerabilityNameIsNot binds and validates array parameter VulnerabilityNameIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindVulnerabilityNameIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvVulnerabilityNameIsNot string
	if len(rawData) > 0 {
		qvVulnerabilityNameIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	vulnerabilityNameIsNotIC := swag.SplitByFormat(qvVulnerabilityNameIsNot, "")
	if len(vulnerabilityNameIsNotIC) == 0 {
		return nil
	}

	var vulnerabilityNameIsNotIR []string
	for _, vulnerabilityNameIsNotIV := range vulnerabilityNameIsNotIC {
		vulnerabilityNameIsNotI := vulnerabilityNameIsNotIV

		vulnerabilityNameIsNotIR = append(vulnerabilityNameIsNotIR, vulnerabilityNameIsNotI)
	}

	o.VulnerabilityNameIsNot = vulnerabilityNameIsNotIR

	return nil
}

// bindVulnerabilityNameIs binds and validates array parameter VulnerabilityNameIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindVulnerabilityNameIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvVulnerabilityNameIs string
	if len(rawData) > 0 {
		qvVulnerabilityNameIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	vulnerabilityNameIsIC := swag.SplitByFormat(qvVulnerabilityNameIs, "")
	if len(vulnerabilityNameIsIC) == 0 {
		return nil
	}

	var vulnerabilityNameIsIR []string
	for _, vulnerabilityNameIsIV := range vulnerabilityNameIsIC {
		vulnerabilityNameIsI := vulnerabilityNameIsIV

		vulnerabilityNameIsIR = append(vulnerabilityNameIsIR, vulnerabilityNameIsI)
	}

	o.VulnerabilityNameIs = vulnerabilityNameIsIR

	return nil
}

// bindVulnerabilityNameStart binds and validates parameter VulnerabilityNameStart from query.
func (o *GetVulnerabilitiesParams) bindVulnerabilityNameStart(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.VulnerabilityNameStart = &raw

	return nil
}

// bindVulnerabilitySeverityGte binds and validates parameter VulnerabilitySeverityGte from query.
func (o *GetVulnerabilitiesParams) bindVulnerabilitySeverityGte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.VulnerabilitySeverityGte = &raw

	if err := o.validateVulnerabilitySeverityGte(formats); err != nil {
		return err
	}

	return nil
}

// validateVulnerabilitySeverityGte carries on validations for parameter VulnerabilitySeverityGte
func (o *GetVulnerabilitiesParams) validateVulnerabilitySeverityGte(formats strfmt.Registry) error {

	if err := validate.EnumCase("vulnerabilitySeverity[gte]", "query", *o.VulnerabilitySeverityGte, []interface{}{"CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE"}, true); err != nil {
		return err
	}

	return nil
}

// bindVulnerabilitySeverityIsNot binds and validates array parameter VulnerabilitySeverityIsNot from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindVulnerabilitySeverityIsNot(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvVulnerabilitySeverityIsNot string
	if len(rawData) > 0 {
		qvVulnerabilitySeverityIsNot = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	vulnerabilitySeverityIsNotIC := swag.SplitByFormat(qvVulnerabilitySeverityIsNot, "")
	if len(vulnerabilitySeverityIsNotIC) == 0 {
		return nil
	}

	var vulnerabilitySeverityIsNotIR []string
	for i, vulnerabilitySeverityIsNotIV := range vulnerabilitySeverityIsNotIC {
		vulnerabilitySeverityIsNotI := vulnerabilitySeverityIsNotIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "vulnerabilitySeverity[isNot]", i), "query", vulnerabilitySeverityIsNotI, []interface{}{"CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE"}, true); err != nil {
			return err
		}

		vulnerabilitySeverityIsNotIR = append(vulnerabilitySeverityIsNotIR, vulnerabilitySeverityIsNotI)
	}

	o.VulnerabilitySeverityIsNot = vulnerabilitySeverityIsNotIR

	return nil
}

// bindVulnerabilitySeverityIs binds and validates array parameter VulnerabilitySeverityIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindVulnerabilitySeverityIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvVulnerabilitySeverityIs string
	if len(rawData) > 0 {
		qvVulnerabilitySeverityIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	vulnerabilitySeverityIsIC := swag.SplitByFormat(qvVulnerabilitySeverityIs, "")
	if len(vulnerabilitySeverityIsIC) == 0 {
		return nil
	}

	var vulnerabilitySeverityIsIR []string
	for i, vulnerabilitySeverityIsIV := range vulnerabilitySeverityIsIC {
		vulnerabilitySeverityIsI := vulnerabilitySeverityIsIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "vulnerabilitySeverity[is]", i), "query", vulnerabilitySeverityIsI, []interface{}{"CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE"}, true); err != nil {
			return err
		}

		vulnerabilitySeverityIsIR = append(vulnerabilitySeverityIsIR, vulnerabilitySeverityIsI)
	}

	o.VulnerabilitySeverityIs = vulnerabilitySeverityIsIR

	return nil
}

// bindVulnerabilitySeverityLte binds and validates parameter VulnerabilitySeverityLte from query.
func (o *GetVulnerabilitiesParams) bindVulnerabilitySeverityLte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.VulnerabilitySeverityLte = &raw

	if err := o.validateVulnerabilitySeverityLte(formats); err != nil {
		return err
	}

	return nil
}

// validateVulnerabilitySeverityLte carries on validations for parameter VulnerabilitySeverityLte
func (o *GetVulnerabilitiesParams) validateVulnerabilitySeverityLte(formats strfmt.Registry) error {

	if err := validate.EnumCase("vulnerabilitySeverity[lte]", "query", *o.VulnerabilitySeverityLte, []interface{}{"CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE"}, true); err != nil {
		return err
	}

	return nil
}

// bindVulnerabilitySourceIs binds and validates array parameter VulnerabilitySourceIs from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetVulnerabilitiesParams) bindVulnerabilitySourceIs(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var qvVulnerabilitySourceIs string
	if len(rawData) > 0 {
		qvVulnerabilitySourceIs = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	vulnerabilitySourceIsIC := swag.SplitByFormat(qvVulnerabilitySourceIs, "")
	if len(vulnerabilitySourceIsIC) == 0 {
		return nil
	}

	var vulnerabilitySourceIsIR []string
	for i, vulnerabilitySourceIsIV := range vulnerabilitySourceIsIC {
		vulnerabilitySourceIsI := vulnerabilitySourceIsIV

		if err := validate.EnumCase(fmt.Sprintf("%s.%v", "vulnerabilitySource[is]", i), "query", vulnerabilitySourceIsI, []interface{}{"CICD", "RUNTIME"}, true); err != nil {
			return err
		}

		vulnerabilitySourceIsIR = append(vulnerabilitySourceIsIR, vulnerabilitySourceIsI)
	}

	o.VulnerabilitySourceIs = vulnerabilitySourceIsIR

	return nil
}
